import { BackendError } from '@/types'\nimport { ProviderManager } from './providers'\n\nexport interface ErrorNotification {\n  id: string\n  type: 'error' | 'warning' | 'info' | 'success'\n  title: string\n  message: string\n  duration?: number\n  actions?: Array<{\n    label: string\n    action: () => void\n    style?: 'primary' | 'secondary'\n  }>\n}\n\nexport class ErrorHandler {\n  private static notifications: Map<string, ErrorNotification> = new Map()\n  private static container: HTMLElement | null = null\n  private static retryAttempts: Map<string, number> = new Map()\n  private static readonly MAX_RETRY_ATTEMPTS = 3\n  private static readonly RETRY_DELAYS = [1000, 3000, 5000] // ms\n\n  public static initialize() {\n    this.createNotificationContainer()\n    this.injectStyles()\n  }\n\n  private static createNotificationContainer() {\n    this.container = document.createElement('div')\n    this.container.id = 'error-notification-container'\n    this.container.className = 'notification-container'\n    document.body.appendChild(this.container)\n  }\n\n  public static handleError(error: any, context?: string): ErrorNotification {\n    console.error('Error occurred:', error, 'Context:', context)\n    \n    let notification: ErrorNotification\n    \n    if (this.isBackendError(error)) {\n      notification = this.handleBackendError(error, context)\n    } else if (error instanceof Error) {\n      notification = this.handleGenericError(error, context)\n    } else {\n      notification = this.handleUnknownError(error, context)\n    }\n    \n    this.showNotification(notification)\n    this.trackError(error, context)\n    \n    return notification\n  }\n\n  private static handleBackendError(error: BackendError, context?: string): ErrorNotification {\n    const baseId = `backend-${error.code}-${Date.now()}`\n    \n    switch (error.code) {\n      case 'RATE_LIMIT':\n        return {\n          id: baseId,\n          type: 'warning',\n          title: 'Rate Limit Exceeded',\n          message: error.retryAfter \n            ? `Too many requests. Please wait ${error.retryAfter} seconds before trying again.`\n            : 'Too many requests. Please wait before trying again.',\n          duration: error.retryAfter ? error.retryAfter * 1000 : 10000,\n          actions: [\n            {\n              label: 'Use Offline Mode',\n              action: () => this.enableOfflineMode(),\n              style: 'secondary'\n            }\n          ]\n        }\n      \n      case 'PAYMENT_REQUIRED':\n        return {\n          id: baseId,\n          type: 'info',\n          title: 'Upgrade Required',\n          message: 'You\\'ve reached your free tier limit. Upgrade to premium for unlimited access.',\n          duration: 0, // Don't auto-dismiss\n          actions: [\n            {\n              label: 'Upgrade Now',\n              action: () => this.showUpgradeModal(),\n              style: 'primary'\n            },\n            {\n              label: 'Use Offline Mode',\n              action: () => this.enableOfflineMode(),\n              style: 'secondary'\n            }\n          ]\n        }\n      \n      case 'UNAUTHORIZED':\n        return {\n          id: baseId,\n          type: 'warning',\n          title: 'Authentication Required',\n          message: 'Please sign in to access premium features.',\n          duration: 0,\n          actions: [\n            {\n              label: 'Sign In',\n              action: () => this.showAuthModal(),\n              style: 'primary'\n            },\n            {\n              label: 'Continue as Guest',\n              action: () => this.enableOfflineMode(),\n              style: 'secondary'\n            }\n          ]\n        }\n      \n      case 'SERVER_ERROR':\n        return {\n          id: baseId,\n          type: 'error',\n          title: 'Server Error',\n          message: 'Our servers are experiencing issues. We\\'ve automatically switched to offline mode.',\n          duration: 8000,\n          actions: [\n            {\n              label: 'Retry',\n              action: () => this.retryLastRequest(context),\n              style: 'primary'\n            }\n          ]\n        }\n      \n      case 'NETWORK_ERROR':\n        return {\n          id: baseId,\n          type: 'error',\n          title: 'Connection Failed',\n          message: 'Unable to connect to our servers. Check your internet connection.',\n          duration: 6000,\n          actions: [\n            {\n              label: 'Retry',\n              action: () => this.retryLastRequest(context),\n              style: 'primary'\n            },\n            {\n              label: 'Work Offline',\n              action: () => this.enableOfflineMode(),\n              style: 'secondary'\n            }\n          ]\n        }\n      \n      case 'VALIDATION_ERROR':\n        return {\n          id: baseId,\n          type: 'warning',\n          title: 'Invalid Request',\n          message: error.message || 'The request contains invalid data. Please check your input and try again.',\n          duration: 6000\n        }\n      \n      default:\n        return {\n          id: baseId,\n          type: 'error',\n          title: 'Service Error',\n          message: error.message || 'An unexpected error occurred with our service.',\n          duration: 6000,\n          actions: [\n            {\n              label: 'Retry',\n              action: () => this.retryLastRequest(context),\n              style: 'primary'\n            }\n          ]\n        }\n    }\n  }\n\n  private static handleGenericError(error: Error, context?: string): ErrorNotification {\n    const id = `generic-${Date.now()}`\n    \n    // Common error patterns\n    if (error.message.includes('fetch')) {\n      return {\n        id,\n        type: 'error',\n        title: 'Network Error',\n        message: 'Failed to connect to the service. Please check your internet connection.',\n        duration: 6000,\n        actions: [\n          {\n            label: 'Retry',\n            action: () => this.retryLastRequest(context),\n            style: 'primary'\n          },\n          {\n            label: 'Work Offline',\n            action: () => this.enableOfflineMode(),\n            style: 'secondary'\n          }\n        ]\n      }\n    }\n    \n    if (error.message.includes('timeout')) {\n      return {\n        id,\n        type: 'warning',\n        title: 'Request Timeout',\n        message: 'The request is taking longer than expected. Please try again.',\n        duration: 5000,\n        actions: [\n          {\n            label: 'Retry',\n            action: () => this.retryLastRequest(context),\n            style: 'primary'\n          }\n        ]\n      }\n    }\n    \n    return {\n      id,\n      type: 'error',\n      title: 'Error',\n      message: error.message || 'An unexpected error occurred.',\n      duration: 5000\n    }\n  }\n\n  private static handleUnknownError(error: any, context?: string): ErrorNotification {\n    return {\n      id: `unknown-${Date.now()}`,\n      type: 'error',\n      title: 'Unexpected Error',\n      message: 'An unexpected error occurred. Please try again.',\n      duration: 5000,\n      actions: [\n        {\n          label: 'Retry',\n          action: () => this.retryLastRequest(context),\n          style: 'primary'\n        }\n      ]\n    }\n  }\n\n  private static showNotification(notification: ErrorNotification) {\n    if (!this.container) {\n      this.createNotificationContainer()\n    }\n    \n    // Remove existing notification with same ID\n    this.hideNotification(notification.id)\n    \n    const element = this.createNotificationElement(notification)\n    this.container!.appendChild(element)\n    this.notifications.set(notification.id, notification)\n    \n    // Auto-dismiss if duration is set\n    if (notification.duration && notification.duration > 0) {\n      setTimeout(() => {\n        this.hideNotification(notification.id)\n      }, notification.duration)\n    }\n  }\n\n  private static createNotificationElement(notification: ErrorNotification): HTMLElement {\n    const element = document.createElement('div')\n    element.className = `notification notification-${notification.type}`\n    element.setAttribute('data-id', notification.id)\n    \n    element.innerHTML = `\n      <div class=\"notification-content\">\n        <div class=\"notification-header\">\n          <span class=\"notification-icon\">${this.getIconForType(notification.type)}</span>\n          <span class=\"notification-title\">${this.escapeHtml(notification.title)}</span>\n          <button class=\"notification-close\" aria-label=\"Close\">&times;</button>\n        </div>\n        \n        <div class=\"notification-message\">\n          ${this.escapeHtml(notification.message)}\n        </div>\n        \n        ${notification.actions ? this.renderActions(notification.actions) : ''}\n      </div>\n    `\n    \n    // Add event listeners\n    const closeBtn = element.querySelector('.notification-close')\n    closeBtn?.addEventListener('click', () => {\n      this.hideNotification(notification.id)\n    })\n    \n    // Add action listeners\n    if (notification.actions) {\n      notification.actions.forEach((action, index) => {\n        const actionBtn = element.querySelector(`[data-action=\"${index}\"]`)\n        actionBtn?.addEventListener('click', () => {\n          action.action()\n          this.hideNotification(notification.id)\n        })\n      })\n    }\n    \n    return element\n  }\n\n  private static renderActions(actions: ErrorNotification['actions']): string {\n    if (!actions || actions.length === 0) return ''\n    \n    return `\n      <div class=\"notification-actions\">\n        ${actions.map((action, index) => `\n          <button \n            class=\"notification-btn notification-btn-${action.style || 'secondary'}\" \n            data-action=\"${index}\"\n          >\n            ${this.escapeHtml(action.label)}\n          </button>\n        `).join('')}\n      </div>\n    `\n  }\n\n  private static getIconForType(type: ErrorNotification['type']): string {\n    switch (type) {\n      case 'error': return '❌'\n      case 'warning': return '⚠️'\n      case 'info': return 'ℹ️'\n      case 'success': return '✅'\n      default: return 'ℹ️'\n    }\n  }\n\n  public static hideNotification(id: string) {\n    const element = this.container?.querySelector(`[data-id=\"${id}\"]`)\n    if (element) {\n      element.remove()\n      this.notifications.delete(id)\n    }\n  }\n\n  public static clearAllNotifications() {\n    if (this.container) {\n      this.container.innerHTML = ''\n      this.notifications.clear()\n    }\n  }\n\n  // Action handlers\n  private static enableOfflineMode() {\n    // Switch to offline mode\n    ProviderManager.enableFallbackMode()\n    this.showSuccessNotification('Switched to offline mode', 'Using local improvements only.')\n  }\n\n  private static showAuthModal() {\n    document.dispatchEvent(new CustomEvent('showAuthModal', { detail: { mode: 'login' } }))\n  }\n\n  private static showUpgradeModal() {\n    document.dispatchEvent(new CustomEvent('showUpgradeModal'))\n  }\n\n  private static async retryLastRequest(context?: string) {\n    if (!context) return\n    \n    const attempts = this.retryAttempts.get(context) || 0\n    if (attempts >= this.MAX_RETRY_ATTEMPTS) {\n      this.showNotification({\n        id: `retry-limit-${Date.now()}`,\n        type: 'error',\n        title: 'Retry Limit Reached',\n        message: 'Maximum retry attempts exceeded. Please try again later.',\n        duration: 5000\n      })\n      return\n    }\n    \n    this.retryAttempts.set(context, attempts + 1)\n    \n    // Wait before retry\n    const delay = this.RETRY_DELAYS[attempts] || this.RETRY_DELAYS[this.RETRY_DELAYS.length - 1]\n    await new Promise(resolve => setTimeout(resolve, delay))\n    \n    // Trigger retry event\n    document.dispatchEvent(new CustomEvent('retryRequest', { detail: { context } }))\n  }\n\n  // Utility methods\n  public static showSuccessNotification(title: string, message: string, duration: number = 3000) {\n    this.showNotification({\n      id: `success-${Date.now()}`,\n      type: 'success',\n      title,\n      message,\n      duration\n    })\n  }\n\n  public static showInfoNotification(title: string, message: string, duration: number = 5000) {\n    this.showNotification({\n      id: `info-${Date.now()}`,\n      type: 'info',\n      title,\n      message,\n      duration\n    })\n  }\n\n  private static isBackendError(error: any): error is BackendError {\n    return error && typeof error.code === 'string' && typeof error.message === 'string'\n  }\n\n  private static escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n\n  private static trackError(error: any, context?: string) {\n    // Track errors for analytics\n    if (typeof chrome !== 'undefined' && chrome.storage) {\n      chrome.storage.local.get('errorLog').then(result => {\n        const errorLog = result.errorLog || []\n        errorLog.push({\n          error: {\n            message: error.message,\n            code: error.code,\n            stack: error.stack\n          },\n          context,\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent\n        })\n        \n        // Keep only last 50 errors\n        if (errorLog.length > 50) {\n          errorLog.splice(0, errorLog.length - 50)\n        }\n        \n        chrome.storage.local.set({ errorLog })\n      }).catch(err => {\n        console.error('Failed to log error:', err)\n      })\n    }\n  }\n\n  // CSS injection\n  private static injectStyles() {\n    if (document.getElementById('error-handler-styles')) return\n    \n    const styles = `\n      .notification-container {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        pointer-events: none;\n      }\n      \n      .notification {\n        background: white;\n        border-radius: 8px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        margin-bottom: 12px;\n        max-width: 400px;\n        pointer-events: auto;\n        transform: translateX(100%);\n        animation: slideIn 0.3s ease-out forwards;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      }\n      \n      .notification-error {\n        border-left: 4px solid #dc3545;\n      }\n      \n      .notification-warning {\n        border-left: 4px solid #ffc107;\n      }\n      \n      .notification-info {\n        border-left: 4px solid #17a2b8;\n      }\n      \n      .notification-success {\n        border-left: 4px solid #28a745;\n      }\n      \n      .notification-content {\n        padding: 16px;\n      }\n      \n      .notification-header {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        margin-bottom: 8px;\n      }\n      \n      .notification-icon {\n        font-size: 16px;\n      }\n      \n      .notification-title {\n        font-weight: 600;\n        color: #333;\n        flex: 1;\n        font-size: 14px;\n      }\n      \n      .notification-close {\n        background: none;\n        border: none;\n        cursor: pointer;\n        color: #666;\n        font-size: 18px;\n        padding: 0;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      \n      .notification-close:hover {\n        color: #333;\n      }\n      \n      .notification-message {\n        color: #666;\n        font-size: 13px;\n        line-height: 1.4;\n        margin-bottom: 12px;\n      }\n      \n      .notification-actions {\n        display: flex;\n        gap: 8px;\n        justify-content: flex-end;\n      }\n      \n      .notification-btn {\n        padding: 6px 12px;\n        border-radius: 4px;\n        font-size: 12px;\n        font-weight: 500;\n        cursor: pointer;\n        border: none;\n      }\n      \n      .notification-btn-primary {\n        background: #007bff;\n        color: white;\n      }\n      \n      .notification-btn-primary:hover {\n        background: #0056b3;\n      }\n      \n      .notification-btn-secondary {\n        background: #6c757d;\n        color: white;\n      }\n      \n      .notification-btn-secondary:hover {\n        background: #545b62;\n      }\n      \n      @keyframes slideIn {\n        from {\n          transform: translateX(100%);\n          opacity: 0;\n        }\n        to {\n          transform: translateX(0);\n          opacity: 1;\n        }\n      }\n      \n      @keyframes slideOut {\n        from {\n          transform: translateX(0);\n          opacity: 1;\n        }\n        to {\n          transform: translateX(100%);\n          opacity: 0;\n        }\n      }\n      \n      .notification.removing {\n        animation: slideOut 0.3s ease-in forwards;\n      }\n    `\n    \n    const styleSheet = document.createElement('style')\n    styleSheet.id = 'error-handler-styles'\n    styleSheet.textContent = styles\n    document.head.appendChild(styleSheet)\n  }\n}