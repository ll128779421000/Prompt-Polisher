import { UsageInfo, User } from '@/types'\nimport { AuthManager } from '@/utils/authManager'\n\nexport class UsageDisplay {\n  private container: HTMLElement\n  private usage: UsageInfo | null = null\n  private user: User | null = null\n  private updateInterval: number | null = null\n\n  constructor(containerId: string) {\n    this.container = document.getElementById(containerId)!\n    if (!this.container) {\n      throw new Error(`Container with id '${containerId}' not found`)\n    }\n    \n    this.init()\n  }\n\n  private async init() {\n    this.user = AuthManager.getUser() || null\n    await this.updateUsage()\n    this.render()\n    this.setupEventListeners()\n    \n    // Update usage info every 30 seconds\n    this.updateInterval = window.setInterval(() => {\n      this.updateUsage()\n    }, 30000)\n  }\n\n  public destroy() {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval)\n      this.updateInterval = null\n    }\n  }\n\n  private async updateUsage() {\n    try {\n      this.usage = await AuthManager.getUserUsage()\n      this.user = AuthManager.getUser() || null\n      this.render()\n    } catch (error) {\n      console.error('Failed to update usage:', error)\n      // Show offline indicator\n      this.renderOfflineMode()\n    }\n  }\n\n  private setupEventListeners() {\n    // Listen for auth state changes\n    AuthManager.addSessionListener((session) => {\n      this.user = session.user || null\n      this.updateUsage()\n    })\n  }\n\n  private render() {\n    if (!this.usage) {\n      this.container.innerHTML = '<div class=\"usage-loading\">Loading usage...</div>'\n      return\n    }\n\n    const isAuthenticated = AuthManager.isAuthenticated()\n    const isPremium = AuthManager.isPremiumUser()\n    \n    this.container.innerHTML = `\n      <div class=\"usage-display\">\n        ${this.renderUserInfo()}\n        ${this.renderUsageBar()}\n        ${this.renderUsageText()}\n        ${this.renderUpgradePrompt()}\n      </div>\n    `\n\n    this.addEventListeners()\n  }\n\n  private renderUserInfo(): string {\n    const isAuthenticated = AuthManager.isAuthenticated()\n    const displayName = AuthManager.getDisplayName()\n    const planName = AuthManager.getPlanDisplayName()\n    \n    if (!isAuthenticated) {\n      return `\n        <div class=\"user-info guest\">\n          <span class=\"user-name\">Guest User</span>\n          <button class=\"btn-login\" id=\"usage-login-btn\">Sign In</button>\n        </div>\n      `\n    }\n    \n    return `\n      <div class=\"user-info authenticated\">\n        <span class=\"user-name\">${this.escapeHtml(displayName)}</span>\n        <span class=\"plan-badge ${planName.toLowerCase()}\">${planName}</span>\n        <button class=\"btn-logout\" id=\"usage-logout-btn\" title=\"Logout\">‚öôÔ∏è</button>\n      </div>\n    `\n  }\n\n  private renderUsageBar(): string {\n    if (!this.usage) return ''\n    \n    const percentage = Math.min((this.usage.current / this.usage.limit) * 100, 100)\n    const isNearLimit = percentage > 80\n    const isAtLimit = this.usage.isLimitReached\n    \n    let barClass = 'usage-bar'\n    if (isAtLimit) barClass += ' at-limit'\n    else if (isNearLimit) barClass += ' near-limit'\n    \n    return `\n      <div class=\"${barClass}\">\n        <div class=\"usage-progress\" style=\"width: ${percentage}%\"></div>\n        <div class=\"usage-bar-text\">\n          ${this.usage.current} / ${this.usage.limit} requests\n        </div>\n      </div>\n    `\n  }\n\n  private renderUsageText(): string {\n    if (!this.usage) return ''\n    \n    const resetDate = new Date(this.usage.resetDate)\n    const now = new Date()\n    const diffTime = resetDate.getTime() - now.getTime()\n    const diffHours = Math.ceil(diffTime / (1000 * 60 * 60))\n    \n    let resetText = ''\n    if (diffHours < 24) {\n      resetText = `Resets in ${diffHours} hours`\n    } else {\n      resetText = `Resets on ${resetDate.toLocaleDateString()}`\n    }\n    \n    if (this.usage.isLimitReached) {\n      return `\n        <div class=\"usage-text limit-reached\">\n          <span class=\"limit-message\">Daily limit reached</span>\n          <span class=\"reset-info\">${resetText}</span>\n        </div>\n      `\n    }\n    \n    return `\n      <div class=\"usage-text\">\n        <span class=\"reset-info\">${resetText}</span>\n      </div>\n    `\n  }\n\n  private renderUpgradePrompt(): string {\n    const isAuthenticated = AuthManager.isAuthenticated()\n    const isPremium = AuthManager.isPremiumUser()\n    \n    if (isPremium) {\n      return `\n        <div class=\"premium-status\">\n          <span class=\"premium-icon\">‚≠ê</span>\n          <span>Unlimited requests</span>\n        </div>\n      `\n    }\n    \n    if (!isAuthenticated) {\n      return `\n        <div class=\"upgrade-prompt\">\n          <p>Sign up for more requests and better AI models!</p>\n          <button class=\"btn-primary\" id=\"usage-signup-btn\">Sign Up Free</button>\n        </div>\n      `\n    }\n    \n    if (this.usage?.isLimitReached || (this.usage && this.usage.current / this.usage.limit > 0.8)) {\n      return `\n        <div class=\"upgrade-prompt\">\n          <p>Upgrade to Premium for unlimited requests</p>\n          <button class=\"btn-primary\" id=\"usage-upgrade-btn\">Upgrade Now</button>\n        </div>\n      `\n    }\n    \n    return ''\n  }\n\n  private renderOfflineMode() {\n    this.container.innerHTML = `\n      <div class=\"usage-display offline\">\n        <div class=\"offline-indicator\">\n          <span class=\"offline-icon\">üì∂</span>\n          <span>Offline Mode</span>\n        </div>\n        <div class=\"offline-message\">\n          Using basic improvements only\n        </div>\n      </div>\n    `\n  }\n\n  private addEventListeners() {\n    // Login button\n    const loginBtn = this.container.querySelector('#usage-login-btn')\n    if (loginBtn) {\n      loginBtn.addEventListener('click', () => this.showAuthModal('login'))\n    }\n    \n    // Signup button\n    const signupBtn = this.container.querySelector('#usage-signup-btn')\n    if (signupBtn) {\n      signupBtn.addEventListener('click', () => this.showAuthModal('signup'))\n    }\n    \n    // Logout button\n    const logoutBtn = this.container.querySelector('#usage-logout-btn')\n    if (logoutBtn) {\n      logoutBtn.addEventListener('click', () => this.handleLogout())\n    }\n    \n    // Upgrade button\n    const upgradeBtn = this.container.querySelector('#usage-upgrade-btn')\n    if (upgradeBtn) {\n      upgradeBtn.addEventListener('click', () => this.showUpgradeModal())\n    }\n  }\n\n  private showAuthModal(mode: 'login' | 'signup') {\n    // Create or show authentication modal\n    const event = new CustomEvent('showAuthModal', {\n      detail: { mode }\n    })\n    document.dispatchEvent(event)\n  }\n\n  private async handleLogout() {\n    try {\n      await AuthManager.logout()\n      // Show success message\n      this.showNotification('Logged out successfully', 'success')\n    } catch (error) {\n      console.error('Logout failed:', error)\n      this.showNotification('Logout failed', 'error')\n    }\n  }\n\n  private showUpgradeModal() {\n    // Create or show upgrade modal\n    const event = new CustomEvent('showUpgradeModal')\n    document.dispatchEvent(event)\n  }\n\n  private showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {\n    const notification = document.createElement('div')\n    notification.className = `notification ${type}`\n    notification.textContent = message\n    \n    // Add to container temporarily\n    this.container.appendChild(notification)\n    \n    // Remove after 3 seconds\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification)\n      }\n    }, 3000)\n  }\n\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n\n  // Public methods for external updates\n  public async refresh() {\n    await this.updateUsage()\n  }\n\n  public setOfflineMode(offline: boolean) {\n    if (offline) {\n      this.renderOfflineMode()\n    } else {\n      this.render()\n    }\n  }\n\n  // Static method to create CSS styles\n  public static injectStyles() {\n    if (document.getElementById('usage-display-styles')) return\n    \n    const styles = `\n      .usage-display {\n        background: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 8px;\n        padding: 16px;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        font-size: 14px;\n        margin-bottom: 16px;\n      }\n      \n      .usage-display.offline {\n        background: #fff3cd;\n        border-color: #ffeaa7;\n      }\n      \n      .user-info {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-bottom: 12px;\n      }\n      \n      .user-name {\n        font-weight: 600;\n        color: #333;\n      }\n      \n      .plan-badge {\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-size: 12px;\n        font-weight: 500;\n        text-transform: uppercase;\n      }\n      \n      .plan-badge.free {\n        background: #e9ecef;\n        color: #6c757d;\n      }\n      \n      .plan-badge.premium {\n        background: #ffd700;\n        color: #333;\n      }\n      \n      .btn-login, .btn-logout {\n        background: none;\n        border: 1px solid #007bff;\n        color: #007bff;\n        padding: 4px 12px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 12px;\n      }\n      \n      .btn-logout {\n        border: none;\n        background: transparent;\n        font-size: 16px;\n        padding: 4px;\n      }\n      \n      .usage-bar {\n        background: #e9ecef;\n        border-radius: 8px;\n        height: 24px;\n        position: relative;\n        margin-bottom: 8px;\n        overflow: hidden;\n      }\n      \n      .usage-progress {\n        background: linear-gradient(90deg, #28a745, #20c997);\n        height: 100%;\n        transition: width 0.3s ease;\n        border-radius: 8px;\n      }\n      \n      .usage-bar.near-limit .usage-progress {\n        background: linear-gradient(90deg, #ffc107, #fd7e14);\n      }\n      \n      .usage-bar.at-limit .usage-progress {\n        background: linear-gradient(90deg, #dc3545, #e74c3c);\n      }\n      \n      .usage-bar-text {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #333;\n        font-weight: 500;\n        font-size: 12px;\n        text-shadow: 0 1px 2px rgba(255,255,255,0.8);\n      }\n      \n      .usage-text {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        color: #6c757d;\n        font-size: 12px;\n        margin-bottom: 12px;\n      }\n      \n      .usage-text.limit-reached {\n        color: #dc3545;\n      }\n      \n      .limit-message {\n        font-weight: 600;\n      }\n      \n      .upgrade-prompt {\n        background: #e7f3ff;\n        border: 1px solid #b3d8ff;\n        border-radius: 6px;\n        padding: 12px;\n        text-align: center;\n      }\n      \n      .upgrade-prompt p {\n        margin: 0 0 8px 0;\n        color: #0066cc;\n        font-size: 13px;\n      }\n      \n      .btn-primary {\n        background: #007bff;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 13px;\n        font-weight: 500;\n      }\n      \n      .btn-primary:hover {\n        background: #0056b3;\n      }\n      \n      .premium-status {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: #333;\n        font-weight: 500;\n        gap: 6px;\n      }\n      \n      .offline-indicator {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 8px;\n        color: #856404;\n        font-weight: 600;\n        margin-bottom: 8px;\n      }\n      \n      .offline-message {\n        text-align: center;\n        color: #856404;\n        font-size: 12px;\n      }\n      \n      .notification {\n        position: absolute;\n        top: -40px;\n        left: 0;\n        right: 0;\n        padding: 8px;\n        border-radius: 4px;\n        text-align: center;\n        font-size: 12px;\n        font-weight: 500;\n        z-index: 1000;\n      }\n      \n      .notification.success {\n        background: #d4edda;\n        color: #155724;\n        border: 1px solid #c3e6cb;\n      }\n      \n      .notification.error {\n        background: #f8d7da;\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n      }\n      \n      .usage-loading {\n        text-align: center;\n        color: #6c757d;\n        padding: 20px;\n      }\n    `\n    \n    const styleSheet = document.createElement('style')\n    styleSheet.id = 'usage-display-styles'\n    styleSheet.textContent = styles\n    document.head.appendChild(styleSheet)\n  }\n}