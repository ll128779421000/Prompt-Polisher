import { PaymentIntent, BackendError } from '@/types'\nimport { BackendService } from '@/utils/backendService'\nimport { AuthManager } from '@/utils/authManager'\n\nexport interface PaymentPlan {\n  id: string\n  name: string\n  price: number\n  currency: string\n  interval: 'month' | 'year'\n  features: string[]\n  popular?: boolean\n}\n\nexport class PaymentModal {\n  private modal: HTMLElement | null = null\n  private isOpen = false\n  private stripe: any = null\n  private elements: any = null\n  private cardElement: any = null\n\n  private readonly plans: PaymentPlan[] = [\n    {\n      id: 'premium-monthly',\n      name: 'Premium Monthly',\n      price: 9.99,\n      currency: 'usd',\n      interval: 'month',\n      features: [\n        'Unlimited AI improvements',\n        'Access to GPT-4 and Claude',\n        'Priority processing',\n        'Advanced analytics',\n        'Custom prompt templates',\n        'Email support'\n      ]\n    },\n    {\n      id: 'premium-yearly',\n      name: 'Premium Yearly',\n      price: 99.99,\n      currency: 'usd',\n      interval: 'year',\n      features: [\n        'All Premium Monthly features',\n        '2 months free',\n        'Priority email support',\n        'Early access to new features',\n        'Export prompt library',\n        'Team sharing (coming soon)'\n      ],\n      popular: true\n    }\n  ]\n\n  constructor() {\n    this.initStripe()\n    this.setupEventListeners()\n  }\n\n  private async initStripe() {\n    // Load Stripe.js dynamically\n    if (!window.Stripe) {\n      const script = document.createElement('script')\n      script.src = 'https://js.stripe.com/v3/'\n      script.onload = () => {\n        this.stripe = window.Stripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY || 'pk_test_...')\n      }\n      document.head.appendChild(script)\n    } else {\n      this.stripe = window.Stripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY || 'pk_test_...')\n    }\n  }\n\n  private setupEventListeners() {\n    // Listen for upgrade modal events\n    document.addEventListener('showUpgradeModal', () => {\n      this.show()\n    })\n    \n    // Listen for escape key\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && this.isOpen) {\n        this.hide()\n      }\n    })\n  }\n\n  public show() {\n    if (this.isOpen) return\n    \n    this.createModal()\n    this.isOpen = true\n    document.body.style.overflow = 'hidden'\n  }\n\n  public hide() {\n    if (!this.isOpen || !this.modal) return\n    \n    this.modal.remove()\n    this.modal = null\n    this.isOpen = false\n    document.body.style.overflow = ''\n    \n    // Clean up Stripe elements\n    if (this.cardElement) {\n      this.cardElement.destroy()\n      this.cardElement = null\n      this.elements = null\n    }\n  }\n\n  private createModal() {\n    this.modal = document.createElement('div')\n    this.modal.className = 'payment-modal-overlay'\n    \n    this.modal.innerHTML = `\n      <div class=\"payment-modal\">\n        <div class=\"modal-header\">\n          <h2>Upgrade to Premium</h2>\n          <button class=\"close-btn\" aria-label=\"Close\">&times;</button>\n        </div>\n        \n        <div class=\"modal-content\">\n          ${this.renderPlans()}\n          \n          <div class=\"payment-form-container\" style=\"display: none;\">\n            <div class=\"selected-plan-summary\"></div>\n            <div class=\"payment-form\">\n              <div class=\"form-group\">\n                <label for=\"card-element\">Card Details</label>\n                <div id=\"card-element\" class=\"stripe-element\"></div>\n                <div id=\"card-errors\" class=\"payment-error\"></div>\n              </div>\n              \n              <div class=\"form-actions\">\n                <button class=\"btn-secondary\" id=\"back-to-plans\">Back to Plans</button>\n                <button class=\"btn-primary\" id=\"submit-payment\" disabled>\n                  <span class=\"payment-btn-text\">Complete Payment</span>\n                  <span class=\"payment-loading\" style=\"display: none;\">Processing...</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `\n    \n    document.body.appendChild(this.modal)\n    this.setupModalEventListeners()\n  }\n\n  private renderPlans(): string {\n    return `\n      <div class=\"plans-container\">\n        <div class=\"plans-header\">\n          <h3>Choose Your Plan</h3>\n          <p>Unlock unlimited AI-powered prompt improvements</p>\n        </div>\n        \n        <div class=\"plans-grid\">\n          ${this.plans.map(plan => this.renderPlan(plan)).join('')}\n        </div>\n        \n        <div class=\"payment-security\">\n          <span class=\"security-icon\">üîí</span>\n          <span>Secure payment powered by Stripe</span>\n        </div>\n      </div>\n    `\n  }\n\n  private renderPlan(plan: PaymentPlan): string {\n    const monthlyPrice = plan.interval === 'year' ? (plan.price / 12).toFixed(2) : plan.price.toFixed(2)\n    \n    return `\n      <div class=\"plan-card ${plan.popular ? 'popular' : ''}\" data-plan-id=\"${plan.id}\">\n        ${plan.popular ? '<div class=\"popular-badge\">Most Popular</div>' : ''}\n        \n        <div class=\"plan-header\">\n          <h4>${plan.name}</h4>\n          <div class=\"plan-price\">\n            <span class=\"price\">$${plan.price}</span>\n            <span class=\"interval\">/${plan.interval}</span>\n          </div>\n          ${plan.interval === 'year' ? `<div class=\"monthly-equivalent\">$${monthlyPrice}/month</div>` : ''}\n        </div>\n        \n        <div class=\"plan-features\">\n          ${plan.features.map(feature => `<div class=\"feature\">‚úì ${feature}</div>`).join('')}\n        </div>\n        \n        <button class=\"plan-select-btn btn-primary\">\n          Select ${plan.name}\n        </button>\n      </div>\n    `\n  }\n\n  private setupModalEventListeners() {\n    if (!this.modal) return\n    \n    // Close button\n    const closeBtn = this.modal.querySelector('.close-btn')\n    closeBtn?.addEventListener('click', () => this.hide())\n    \n    // Click outside to close\n    this.modal.addEventListener('click', (e) => {\n      if (e.target === this.modal) {\n        this.hide()\n      }\n    })\n    \n    // Plan selection\n    const planCards = this.modal.querySelectorAll('.plan-card')\n    planCards.forEach(card => {\n      card.addEventListener('click', () => {\n        const planId = card.getAttribute('data-plan-id')\n        if (planId) {\n          this.selectPlan(planId)\n        }\n      })\n    })\n    \n    // Back to plans button\n    const backBtn = this.modal.querySelector('#back-to-plans')\n    backBtn?.addEventListener('click', () => this.showPlans())\n  }\n\n  private async selectPlan(planId: string) {\n    const plan = this.plans.find(p => p.id === planId)\n    if (!plan) return\n    \n    // Check if user is authenticated\n    if (!AuthManager.isAuthenticated()) {\n      this.showAuthRequiredMessage()\n      return\n    }\n    \n    this.showPaymentForm(plan)\n  }\n\n  private showAuthRequiredMessage() {\n    const content = this.modal?.querySelector('.modal-content')\n    if (!content) return\n    \n    content.innerHTML = `\n      <div class=\"auth-required\">\n        <div class=\"auth-icon\">üîê</div>\n        <h3>Sign In Required</h3>\n        <p>Please sign in to your account to upgrade to Premium.</p>\n        \n        <div class=\"auth-actions\">\n          <button class=\"btn-secondary\" id=\"auth-back\">Back to Plans</button>\n          <button class=\"btn-primary\" id=\"auth-signin\">Sign In</button>\n        </div>\n      </div>\n    `\n    \n    const backBtn = content.querySelector('#auth-back')\n    backBtn?.addEventListener('click', () => this.showPlans())\n    \n    const signinBtn = content.querySelector('#auth-signin')\n    signinBtn?.addEventListener('click', () => {\n      this.hide()\n      document.dispatchEvent(new CustomEvent('showAuthModal', { detail: { mode: 'login' } }))\n    })\n  }\n\n  private showPlans() {\n    const content = this.modal?.querySelector('.modal-content')\n    if (!content) return\n    \n    content.innerHTML = this.renderPlans()\n    this.setupModalEventListeners()\n  }\n\n  private async showPaymentForm(plan: PaymentPlan) {\n    const content = this.modal?.querySelector('.modal-content')\n    if (!content) return\n    \n    // Update content\n    const planContainer = content.querySelector('.plans-container')\n    const formContainer = content.querySelector('.payment-form-container')\n    \n    if (planContainer) planContainer.style.display = 'none'\n    if (formContainer) {\n      formContainer.style.display = 'block'\n      \n      // Update plan summary\n      const summary = formContainer.querySelector('.selected-plan-summary')\n      if (summary) {\n        summary.innerHTML = `\n          <div class=\"plan-summary\">\n            <h4>Selected Plan: ${plan.name}</h4>\n            <div class=\"summary-price\">$${plan.price}/${plan.interval}</div>\n          </div>\n        `\n      }\n    }\n    \n    // Initialize Stripe Elements\n    await this.initializeStripeElements(plan)\n  }\n\n  private async initializeStripeElements(plan: PaymentPlan) {\n    if (!this.stripe) {\n      this.showPaymentError('Payment system not loaded. Please refresh and try again.')\n      return\n    }\n    \n    try {\n      // Create payment intent\n      const paymentIntent = await BackendService.createPaymentIntent(plan.id, plan.currency)\n      \n      // Create Stripe Elements\n      this.elements = this.stripe.elements({\n        clientSecret: paymentIntent.clientSecret\n      })\n      \n      this.cardElement = this.elements.create('card', {\n        style: {\n          base: {\n            fontSize: '16px',\n            color: '#424770',\n            '::placeholder': {\n              color: '#aab7c4',\n            },\n          },\n        },\n      })\n      \n      this.cardElement.mount('#card-element')\n      \n      // Listen for validation errors\n      this.cardElement.on('change', (event: any) => {\n        const displayError = document.getElementById('card-errors')\n        if (event.error) {\n          displayError!.textContent = event.error.message\n          this.setPaymentButtonState(false)\n        } else {\n          displayError!.textContent = ''\n          this.setPaymentButtonState(event.complete)\n        }\n      })\n      \n      // Setup payment submission\n      const submitBtn = this.modal?.querySelector('#submit-payment')\n      submitBtn?.addEventListener('click', () => this.submitPayment(paymentIntent))\n      \n    } catch (error) {\n      console.error('Failed to initialize payment:', error)\n      this.showPaymentError('Failed to initialize payment. Please try again.')\n    }\n  }\n\n  private async submitPayment(paymentIntent: PaymentIntent) {\n    if (!this.stripe || !this.elements) return\n    \n    this.setPaymentLoading(true)\n    \n    try {\n      const { error } = await this.stripe.confirmPayment({\n        elements: this.elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/payment-success`,\n        },\n      })\n      \n      if (error) {\n        this.showPaymentError(error.message)\n      } else {\n        // Payment succeeded - refresh user data\n        await AuthManager.refreshToken()\n        this.showPaymentSuccess()\n      }\n      \n    } catch (error) {\n      console.error('Payment error:', error)\n      this.showPaymentError('Payment failed. Please try again.')\n    } finally {\n      this.setPaymentLoading(false)\n    }\n  }\n\n  private setPaymentButtonState(enabled: boolean) {\n    const submitBtn = this.modal?.querySelector('#submit-payment') as HTMLButtonElement\n    if (submitBtn) {\n      submitBtn.disabled = !enabled\n    }\n  }\n\n  private setPaymentLoading(loading: boolean) {\n    const submitBtn = this.modal?.querySelector('#submit-payment')\n    const btnText = submitBtn?.querySelector('.payment-btn-text')\n    const loadingText = submitBtn?.querySelector('.payment-loading')\n    \n    if (loading) {\n      btnText?.setAttribute('style', 'display: none;')\n      loadingText?.setAttribute('style', 'display: inline;')\n      (submitBtn as HTMLButtonElement).disabled = true\n    } else {\n      btnText?.setAttribute('style', 'display: inline;')\n      loadingText?.setAttribute('style', 'display: none;')\n      (submitBtn as HTMLButtonElement).disabled = false\n    }\n  }\n\n  private showPaymentError(message: string) {\n    const errorContainer = this.modal?.querySelector('#card-errors')\n    if (errorContainer) {\n      errorContainer.textContent = message\n    }\n  }\n\n  private showPaymentSuccess() {\n    const content = this.modal?.querySelector('.modal-content')\n    if (!content) return\n    \n    content.innerHTML = `\n      <div class=\"payment-success\">\n        <div class=\"success-icon\">‚úÖ</div>\n        <h3>Payment Successful!</h3>\n        <p>Welcome to Prompt Polisher Premium!</p>\n        <p>You now have unlimited access to all AI improvements.</p>\n        \n        <button class=\"btn-primary\" id=\"success-close\">\n          Start Using Premium\n        </button>\n      </div>\n    `\n    \n    const closeBtn = content.querySelector('#success-close')\n    closeBtn?.addEventListener('click', () => {\n      this.hide()\n      // Refresh the page or update UI to reflect premium status\n      window.location.reload()\n    })\n  }\n\n  // Static method to inject CSS styles\n  public static injectStyles() {\n    if (document.getElementById('payment-modal-styles')) return\n    \n    const styles = `\n      .payment-modal-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(0, 0, 0, 0.5);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 10000;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      }\n      \n      .payment-modal {\n        background: white;\n        border-radius: 12px;\n        max-width: 800px;\n        width: 90%;\n        max-height: 90vh;\n        overflow-y: auto;\n        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n      }\n      \n      .modal-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 24px 24px 0;\n      }\n      \n      .modal-header h2 {\n        margin: 0;\n        color: #333;\n      }\n      \n      .close-btn {\n        background: none;\n        border: none;\n        font-size: 24px;\n        cursor: pointer;\n        color: #666;\n        padding: 0;\n        width: 32px;\n        height: 32px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      \n      .modal-content {\n        padding: 24px;\n      }\n      \n      .plans-header {\n        text-align: center;\n        margin-bottom: 32px;\n      }\n      \n      .plans-header h3 {\n        margin: 0 0 8px 0;\n        color: #333;\n      }\n      \n      .plans-header p {\n        margin: 0;\n        color: #666;\n      }\n      \n      .plans-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n        gap: 24px;\n        margin-bottom: 24px;\n      }\n      \n      .plan-card {\n        border: 2px solid #e9ecef;\n        border-radius: 12px;\n        padding: 24px;\n        position: relative;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n      \n      .plan-card:hover {\n        border-color: #007bff;\n        transform: translateY(-2px);\n        box-shadow: 0 8px 16px rgba(0, 123, 255, 0.1);\n      }\n      \n      .plan-card.popular {\n        border-color: #007bff;\n        background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);\n      }\n      \n      .popular-badge {\n        position: absolute;\n        top: -12px;\n        left: 50%;\n        transform: translateX(-50%);\n        background: #007bff;\n        color: white;\n        padding: 6px 16px;\n        border-radius: 16px;\n        font-size: 12px;\n        font-weight: 600;\n      }\n      \n      .plan-header {\n        text-align: center;\n        margin-bottom: 24px;\n      }\n      \n      .plan-header h4 {\n        margin: 0 0 12px 0;\n        color: #333;\n      }\n      \n      .plan-price {\n        display: flex;\n        align-items: baseline;\n        justify-content: center;\n        gap: 4px;\n      }\n      \n      .price {\n        font-size: 32px;\n        font-weight: 700;\n        color: #007bff;\n      }\n      \n      .interval {\n        color: #666;\n        font-size: 16px;\n      }\n      \n      .monthly-equivalent {\n        color: #28a745;\n        font-size: 14px;\n        margin-top: 4px;\n      }\n      \n      .plan-features {\n        margin-bottom: 24px;\n      }\n      \n      .feature {\n        padding: 8px 0;\n        color: #333;\n        font-size: 14px;\n      }\n      \n      .plan-select-btn {\n        width: 100%;\n        padding: 12px;\n        font-weight: 600;\n      }\n      \n      .payment-security {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 8px;\n        color: #666;\n        font-size: 14px;\n      }\n      \n      .stripe-element {\n        padding: 12px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        background: white;\n      }\n      \n      .payment-error {\n        color: #dc3545;\n        font-size: 14px;\n        margin-top: 8px;\n      }\n      \n      .form-group {\n        margin-bottom: 24px;\n      }\n      \n      .form-group label {\n        display: block;\n        margin-bottom: 8px;\n        color: #333;\n        font-weight: 500;\n      }\n      \n      .form-actions {\n        display: flex;\n        gap: 12px;\n        justify-content: flex-end;\n      }\n      \n      .btn-primary, .btn-secondary {\n        padding: 12px 24px;\n        border-radius: 6px;\n        font-weight: 500;\n        cursor: pointer;\n        border: none;\n        font-size: 14px;\n      }\n      \n      .btn-primary {\n        background: #007bff;\n        color: white;\n      }\n      \n      .btn-primary:hover:not(:disabled) {\n        background: #0056b3;\n      }\n      \n      .btn-primary:disabled {\n        background: #ccc;\n        cursor: not-allowed;\n      }\n      \n      .btn-secondary {\n        background: #6c757d;\n        color: white;\n      }\n      \n      .btn-secondary:hover {\n        background: #545b62;\n      }\n      \n      .plan-summary {\n        background: #f8f9fa;\n        padding: 16px;\n        border-radius: 8px;\n        margin-bottom: 24px;\n      }\n      \n      .plan-summary h4 {\n        margin: 0 0 8px 0;\n        color: #333;\n      }\n      \n      .summary-price {\n        font-size: 18px;\n        font-weight: 600;\n        color: #007bff;\n      }\n      \n      .auth-required, .payment-success {\n        text-align: center;\n        padding: 40px 20px;\n      }\n      \n      .auth-icon, .success-icon {\n        font-size: 48px;\n        margin-bottom: 16px;\n      }\n      \n      .auth-required h3, .payment-success h3 {\n        margin: 0 0 16px 0;\n        color: #333;\n      }\n      \n      .auth-required p, .payment-success p {\n        margin: 0 0 16px 0;\n        color: #666;\n      }\n      \n      .auth-actions {\n        display: flex;\n        gap: 12px;\n        justify-content: center;\n        margin-top: 24px;\n      }\n    `\n    \n    const styleSheet = document.createElement('style')\n    styleSheet.id = 'payment-modal-styles'\n    styleSheet.textContent = styles\n    document.head.appendChild(styleSheet)\n  }\n}\n\n// Extend window object for Stripe\ndeclare global {\n  interface Window {\n    Stripe: any\n  }\n}